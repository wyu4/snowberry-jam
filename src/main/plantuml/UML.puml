@startuml
class com.wyu4.snowberryjam.compiler.data.values.conditional.And {
+ <<Create>> And(JsonNode)
+ Boolean getState()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.tasks.WarnTask {
- ValueHolder message
+ <<Create>> WarnTask(JsonNode)
+ <<Create>> WarnTask(String)
+ <<Create>> WarnTask(ValueHolder)
+ void execute()
+ SourceId getId()
+ Object feedback()
+ String toString()
}


class com.wyu4.snowberryjam.Start {
- {static} Logger logger
+ {static} void main(String[])
+ void start(Stage)
}


class com.wyu4.snowberryjam.compiler.data.values.builtin.Input {
- AtomicReference<String> input
+ <<Create>> Input()
+ Object getValue()
+ void release()
+ Class<?> getType()
+ String toString()
}


class com.wyu4.snowberryjam.compiler.data.values.iteration.WithUpdatedElement {
+ <<Create>> WithUpdatedElement(JsonNode)
+ Object getValue()
+ Class<?> getType()
}

class com.wyu4.snowberryjam.compiler.data.values.math.Minus {
+ <<Create>> Minus(JsonNode)
+ <<Create>> Minus(ValueHolder,ValueHolder)
+ Object getValue()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder {
+ <<Create>> ConditionalHolder(JsonNode)
+ Boolean getState()
+ boolean bothTypesAre(Class<?>)
+ Object getValue()
+ Class<?> getType()
+ boolean notEmpty()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.tasks.macros.IncreaseMacro {
- ValueHolder name
- ValueHolder value
- Plus plusHandler
+ <<Create>> IncreaseMacro(JsonNode)
+ <<Create>> IncreaseMacro(ValueHolder,ValueHolder)
+ void execute()
+ SourceId getId()
+ Object feedback()
+ String toString()
}


class com.wyu4.snowberryjam.compiler.data.values.conditional.SameType {
+ <<Create>> SameType(JsonNode)
+ Boolean getState()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.values.iteration.ArrayHolder {
- ValueHolder i
+ <<Create>> ArrayHolder(JsonNode)
# ValueHolder getI()
# int getValidIndex()
+ String toString()
}


class com.wyu4.snowberryjam.compiler.data.values.conditional.GreaterOrEqualTo {
+ <<Create>> GreaterOrEqualTo(JsonNode)
+ Boolean getState()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.values.builtin.RandomHolder {
+ Object getValue()
+ Class<?> getType()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.values.conditional.Or {
+ <<Create>> Or(JsonNode)
+ Boolean getState()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.values.math.Modulus {
+ <<Create>> Modulus(JsonNode)
+ Object getValue()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.values.conditional.Equals {
+ <<Create>> Equals(JsonNode)
+ Boolean getState()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.tasks.WhileTask {
- ValueHolder condition
- BodyStack body
+ <<Create>> WhileTask(JsonNode)
+ <<Create>> WhileTask(ConditionalHolder,BodyStack)
+ void execute()
+ SourceId getId()
+ Object feedback()
+ String toString()
}


class com.wyu4.snowberryjam.compiler.data.values.iteration.ElementAtIndex {
+ <<Create>> ElementAtIndex(JsonNode)
+ Object getValue()
+ String toString()
}

interface com.wyu4.snowberryjam.compiler.data.values.Releasable {
~ void init()
~ void release()
}

class com.wyu4.snowberryjam.compiler.data.values.conditional.Not {
+ <<Create>> Not(JsonNode)
+ Object getValue()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.tasks.SetTask {
- ValueHolder name
- ValueHolder value
+ <<Create>> SetTask(JsonNode)
+ <<Create>> SetTask(ValueHolder,ValueHolder)
+ void execute()
+ SourceId getId()
+ Object feedback()
+ String toString()
}


class com.wyu4.snowberryjam.framework.viewer.VariableViewer {
- TableColumn<VariableListener,String> nameColumn
- TableColumn<VariableListener,String> typeColumn
- TableColumn<VariableListener,String> valueColumn
- ObservableList<VariableListener> variables
+ <<Create>> VariableViewer()
+ void refresh()
}


class com.wyu4.snowberryjam.framework.viewer.VariableListener {
- StringProperty name
- StringProperty type
- ObjectProperty<Object> value
+ <<Create>> VariableListener(String)
+ ObjectProperty<Object> getValueProperty()
+ StringProperty getTypeProperty()
+ StringProperty getNameProperty()
}


class com.wyu4.snowberryjam.compiler.data.values.math.ArithmeticHolder {
+ <<Create>> ArithmeticHolder(JsonNode)
+ <<Create>> ArithmeticHolder(ValueHolder,ValueHolder)
+ Object getValue()
+ boolean notEmpty()
+ String toString()
}

interface com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask {
~ void execute()
~ SourceId getId()
~ Object feedback()
}

abstract class com.wyu4.snowberryjam.compiler.LocalStorage {
- {static} Logger logger
- {static} Logger inputLogger
- {static} HashMap<String,Object> VARIABLES
- {static} HashMap<String,Object> VARIABLES_COPY
- {static} List<Releasable> RELEASABLES
- {static} List<Thread> THREADS
- {static} BodyStack STACK
- {static} AtomicReference<String> NAME
- {static} List<BiConsumer<String,String>> PRINT_LISTENERS
- {static} List<BiConsumer<String,String>> WARN_LISTENERS
- {static} List<BiConsumer<String,String>> ERROR_LISTENERS
- {static} List<Consumer<String>> INPUT_LISTENERS
- {static} HashMap<String,Consumer<Object>> VARIABLE_LISTENERS
+ {static} AtomicInteger pointer
+ {static} String getDefaultSource()
+ {static} Object getRaw(String)
+ {static} Set<String> getVariableNames()
+ {static} ExecutableTask[] copyStack()
+ {static} void flush()
+ {static} Thread createThread(Runnable)
+ {static} void setVariable(String,Object)
+ {static} void runStack()
# {static} void setName(String)
# {static} void createVariable(String,Object)
# {static} void stackAdd(ExecutableTask)
- {static} Logger getLogger()
+ {static} void sendInput(String)
+ {static} void print(Object,Object)
+ {static} void warn(Object,Object)
+ {static} void error(Object)
+ {static} void error(Object,Exception)
# {static} String formatMessage(Object,Object)
+ {static} void addPrintListener(BiConsumer<String,String>)
+ {static} void addWarnListener(BiConsumer<String,String>)
+ {static} void addErrorListener(BiConsumer<String,String>)
+ {static} void addVariableListener(String,Consumer<Object>)
+ {static} void addInputSubscription(Consumer<String>)
+ {static} void addReleasable(Releasable)
}


class com.wyu4.snowberryjam.compiler.data.values.math.Multiply {
+ <<Create>> Multiply(JsonNode)
+ Object getValue()
+ String toString()
}

class com.wyu4.snowberryjam.framework.Interactor {
- {static} Logger logger
- Model model
- Stage stage
+ <<Create>> Interactor(Model,Stage)
+ Runnable createOpenFileTask()
+ Runnable createSetFileTask(File)
+ Runnable createSaveFileTask()
+ Runnable createSaveFileTask(File)
+ Runnable createSaveAsFileTask()
+ Runnable createNewProjectTask()
+ Runnable createCompileTask()
+ Runnable createCompileTask(Runnable)
+ Runnable createRunTask()
+ Runnable createFormatCodeTask()
}


class com.wyu4.snowberryjam.framework.viewer.StackViewer {
- AtomicReference<ExecutableTask[]> tasks
+ <<Create>> StackViewer()
+ <<Create>> StackViewer(BodyStack)
+ void setStack(BodyStack)
+ void setStack(ExecutableTask[])
}


class com.wyu4.snowberryjam.compiler.data.BodyStack {
- {static} Logger logger
- {static} AtomicBoolean DEBUGGING_ENABLED
- SourceId id
- List<ExecutableTask> stack
+ <<Create>> BodyStack(SourceId)
+ {static} void setDebuggingEnabled(boolean)
+ void addTask(ExecutableTask)
+ ExecutableTask[] copyStack()
+ void flush()
+ void execute()
+ Object feedback()
+ SourceId getId()
}


class com.wyu4.snowberryjam.compiler.data.tasks.macros.DecreaseMacro {
- ValueHolder name
- ValueHolder value
- Minus minusHandler
+ <<Create>> DecreaseMacro(JsonNode)
+ <<Create>> DecreaseMacro(ValueHolder,ValueHolder)
+ void execute()
+ SourceId getId()
+ Object feedback()
+ String toString()
}


abstract class com.wyu4.snowberryjam.codeutils.AutoComplete {
+ {static} void persistIndent(CodeArea)
+ {static} void formatIndent(CodeArea)
+ {static} void fullfillPunctation(CodeArea)
+ {static} void replaceBefore(CodeArea,Object,int)
+ {static} void replace(CodeArea,Object,int,int)
+ {static} void insertBefore(CodeArea,Object,int)
+ {static} void insertAfter(CodeArea,Object,int)
}

class com.wyu4.snowberryjam.compiler.data.values.conversion.SizeOf {
+ <<Create>> SizeOf(JsonNode)
+ Object getValue()
+ Class<?> getType()
}

class com.wyu4.snowberryjam.compiler.data.values.math.Divide {
+ <<Create>> Divide(JsonNode)
+ Object getValue()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.tasks.WaitTask {
- {static} Logger logger
- ValueHolder time
+ <<Create>> WaitTask(JsonNode)
+ void execute()
+ SourceId getId()
+ Object feedback()
- long getTime()
+ String toString()
}


class com.wyu4.snowberryjam.framework.ViewBuilder {
- {static} Logger logger
- Model model
- Interactor interactor
+ <<Create>> ViewBuilder(Model,Interactor)
+ Region build()
+ Node createMenuBar()
+ Node createProjectWidget()
+ Node createConsole()
+ Node createLog(String,String,Color)
+ Node createCodeViewer()
+ Node createCodeEditor()
}


class com.wyu4.snowberryjam.compiler.data.values.VariableReference {
- ValueHolder name
+ <<Create>> VariableReference(String)
+ <<Create>> VariableReference(ValueHolder)
+ String getName()
+ Object getValue()
+ String toString()
}


class com.wyu4.snowberryjam.compiler.data.values.math.Plus {
+ <<Create>> Plus(JsonNode)
+ <<Create>> Plus(ValueHolder,ValueHolder)
+ Object getValue()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.values.ValueHolder {
- Object value
+ <<Create>> ValueHolder()
+ <<Create>> ValueHolder(Object)
- {static} boolean isPrimitive(JsonNode)
+ {static} ValueHolder fromNode(JsonNode)
+ {static} ValueHolder checkValueIsConditional(ValueHolder)
+ Object getValue()
+ Object[] getArray()
+ String getString()
+ Class<?> getType()
+ boolean isType(Class<?>)
+ boolean notEmpty()
+ Double getSize()
+ boolean equals(Object)
+ boolean superEquals(Object)
+ String toString()
}


class com.wyu4.snowberryjam.framework.Model {
- ObjectProperty<File> sourceFileProperty
- ObjectProperty<Page> pageProperty
- BooleanProperty saveDisabledProperty
- BooleanProperty saveAsDisabledProperty
- BooleanProperty runDisabledProperty
- BooleanProperty compilingProperty
- BooleanProperty runningProperty
- StringProperty sourceCodeProperty
- StringProperty builtSourceCodeProperty
- IntegerProperty logNumberProperty
+ ObjectProperty<File> getSourceFileProperty()
+ ObjectProperty<Page> getPageProperty()
+ BooleanProperty getSaveDisabledProperty()
+ BooleanProperty getSaveAsDisabledProperty()
+ BooleanProperty getRunDisabledProperty()
+ BooleanProperty getCompilingProperty()
+ BooleanProperty getRunningProperty()
+ StringProperty getSourceCodeProperty()
+ StringProperty getBuiltSourceCodeProperty()
+ IntegerProperty getLogNumberProperty()
+ File getSourceFile()
+ Page getPage()
+ boolean getSaveDisabled()
+ boolean getSaveAsDisabled()
+ boolean getRunDisabled()
+ boolean getCompiling()
+ boolean getRunning()
+ String getSourceCode()
+ String getBuiltSourceCode()
+ int getLogNumber()
}


enum com.wyu4.snowberryjam.framework.Page {
+  EDITOR
+  VIEWER
}

class com.wyu4.snowberryjam.compiler.data.values.builtin.TimeHolder {
+ Object getValue()
+ Class<?> getType()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.tasks.IfElseTask {
- ValueHolder condition
- BodyStack body
- BodyStack elseBody
+ <<Create>> IfElseTask(JsonNode)
+ void execute()
+ SourceId getId()
+ Object feedback()
+ String toString()
}


abstract class com.wyu4.snowberryjam.compiler.Compiler {
- {static} Logger logger
- {static} List<BiConsumer<String,String>> PRINT_LISTENERS
- {static} List<BiConsumer<String,String>> WARN_LISTENERS
- {static} List<BiConsumer<String,String>> ERROR_LISTENERS
+ {static} String formatString(String)
- {static} JsonNode getTree(String)
+ {static} void compile(String)
- {static} void mapProjectData(JsonNode)
- {static} void mapProjectVariables(JsonNode)
- {static} void compileEvents(JsonNode)
+ {static} void compileBody(JsonNode,BodyStack)
- {static} String getProperty(JsonNode,String)
+ {static} String getId(JsonNode)
+ {static} String getName(JsonNode)
+ {static} Object asPrimitiveObject(JsonNode)
+ {static} void print(Object,Object)
+ {static} void printTab(Object,Object)
+ {static} void error(Object)
+ {static} void error(Object,Exception)
+ {static} void warn(Object,Object)
+ {static} void addPrintListener(BiConsumer<String,String>)
+ {static} void addWarnListener(BiConsumer<String,String>)
+ {static} void addErrorListener(BiConsumer<String,String>)
}


enum com.wyu4.snowberryjam.compiler.enums.SourceKey {
+  ARRAY
+  BODY
+  ELSE
+  EVENTS
+  ID
+  NAME
+  PARAM_A
+  PARAM_B
+  PARAM_I
+  VARIABLES
+  VALUE
- String key
~ <<Create>> SourceKey(String)
+ String toString()
}


class com.wyu4.snowberryjam.compiler.data.values.conditional.LessOrEqualTo {
+ <<Create>> LessOrEqualTo(JsonNode)
+ Boolean getState()
+ String toString()
}

abstract class com.wyu4.snowberryjam.ResourceUtils {
- {static} Logger logger
+ {static} String IMAGES
+ {static} String getFullPath(ResourceFile)
+ {static} URL getFullPathAsUrl(ResourceFile)
+ {static} String readFile(ResourceFile)
+ {static} String readFile(File)
}


enum com.wyu4.snowberryjam.ResourceFile {
+  COMPILER_ICON
+  DEFAULT_SOURCE
+  IMAGES_FOLDER
+  STYLE
- String path
~ <<Create>> ResourceFile(String)
+ String toString()
}


abstract class com.wyu4.snowberryjam.codeutils.Filter {
+ {static} boolean isSpecialOperation(KeyEvent)
+ {static} boolean isWrappablePunctuation(KeyEvent)
}

class com.wyu4.snowberryjam.compiler.data.values.conditional.GreaterThan {
+ <<Create>> GreaterThan(JsonNode)
+ Boolean getState()
+ String toString()
}

enum com.wyu4.snowberryjam.compiler.enums.SourceId {
+  AND
+  ARRAY_OF
+  ELEMENT_AT_INDEX
+  DECREASE_MACRO
+  DIVIDE
+  EQUALS
+  GREATER_THAN
+  GREATER_OR_EQUAL_TO
+  IF
+  IF_ELSE
+  INCREASE_MACRO
+  INPUT
+  LESS_THAN
+  LESS_OR_EQUAL_TO
+  ON_RUN
+  OR
+  MINUS
+  MODULUS
+  MULTIPLY
+  NOT
+  PLUS
+  PRINT
+  PROJECT
+  RANDOM
+  REPEAT
+  ROUND
+  SAME_TYPE
+  SET
+  SIZE_OF
+  TIME
+  VARIABLE
+  WAIT
+  WARN
+  WHILE
+  WITH_UPDATED_ELEMENT
- String id
~ <<Create>> SourceId(String)
+ String toString()
}


abstract class com.wyu4.snowberryjam.compiler.enums.EnumHelper {
+ {static} SourceId stringToId(String)
+ {static} SourceKey stringToKey(String)
}

class com.wyu4.snowberryjam.framework.Controller {
- Builder<Region> builder
- Model model
- Interactor interactor
+ <<Create>> Controller(Stage)
+ void updateFile(File)
+ File getSourceFile()
+ ObjectProperty<File> getSourceFileProperty()
+ Region getView()
}


class com.wyu4.snowberryjam.compiler.data.tasks.Repeat {
- ValueHolder repeats
- ValueHolder variableName
- BodyStack body
+ <<Create>> Repeat(JsonNode)
+ void execute()
+ SourceId getId()
+ Object feedback()
+ String toString()
}


class com.wyu4.snowberryjam.compiler.data.values.InteractiveValueHolder {
- ValueHolder a
- ValueHolder b
+ <<Create>> InteractiveValueHolder(JsonNode)
+ <<Create>> InteractiveValueHolder(ValueHolder,ValueHolder)
# ValueHolder getA()
# ValueHolder getB()
}


class com.wyu4.snowberryjam.compiler.data.tasks.IfTask {
- ValueHolder condition
- BodyStack body
+ <<Create>> IfTask(JsonNode)
+ void execute()
+ SourceId getId()
+ Object feedback()
+ String toString()
}


class com.wyu4.snowberryjam.compiler.data.values.conversion.ArrayOf {
+ <<Create>> ArrayOf(JsonNode)
+ Object getValue()
+ Class<?> getType()
}

class com.wyu4.snowberryjam.compiler.CompilerTest {
+ {static} void test(File)
+ {static} void main(String[])
}

class com.wyu4.snowberryjam.compiler.data.values.conditional.LessThan {
+ <<Create>> LessThan(JsonNode)
+ Boolean getState()
+ String toString()
}

class com.wyu4.snowberryjam.compiler.data.tasks.PrintTask {
- ValueHolder message
+ <<Create>> PrintTask(JsonNode)
+ <<Create>> PrintTask(String)
+ <<Create>> PrintTask(ValueHolder)
+ void execute()
+ SourceId getId()
+ Object feedback()
+ String toString()
}


class com.wyu4.snowberryjam.compiler.data.values.math.Round {
+ <<Create>> Round(JsonNode)
+ Object getValue()
+ String toString()
}



com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.And
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.WarnTask
javafx.application.Application <|-- com.wyu4.snowberryjam.Start
com.wyu4.snowberryjam.compiler.data.values.Releasable <|.. com.wyu4.snowberryjam.compiler.data.values.builtin.Input
com.wyu4.snowberryjam.compiler.data.values.ValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.builtin.Input
com.wyu4.snowberryjam.compiler.data.values.iteration.ArrayHolder <|-- com.wyu4.snowberryjam.compiler.data.values.iteration.WithUpdatedElement
com.wyu4.snowberryjam.compiler.data.values.math.ArithmeticHolder <|-- com.wyu4.snowberryjam.compiler.data.values.math.Minus
com.wyu4.snowberryjam.compiler.data.values.InteractiveValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.macros.IncreaseMacro
com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.SameType
com.wyu4.snowberryjam.compiler.data.values.InteractiveValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.iteration.ArrayHolder
com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.GreaterOrEqualTo
com.wyu4.snowberryjam.compiler.data.values.ValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.builtin.RandomHolder
com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.Or
com.wyu4.snowberryjam.compiler.data.values.math.ArithmeticHolder <|-- com.wyu4.snowberryjam.compiler.data.values.math.Modulus
com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.Equals
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.WhileTask
com.wyu4.snowberryjam.compiler.data.values.iteration.ArrayHolder <|-- com.wyu4.snowberryjam.compiler.data.values.iteration.ElementAtIndex
com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.Not
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.SetTask
javafx.scene.control.TableView <|-- com.wyu4.snowberryjam.framework.viewer.VariableViewer
com.wyu4.snowberryjam.compiler.data.values.InteractiveValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.math.ArithmeticHolder
com.wyu4.snowberryjam.compiler.data.values.math.ArithmeticHolder <|-- com.wyu4.snowberryjam.compiler.data.values.math.Multiply
javafx.scene.layout.StackPane <|-- com.wyu4.snowberryjam.framework.viewer.StackViewer
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.BodyStack
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.macros.DecreaseMacro
com.wyu4.snowberryjam.compiler.data.values.InteractiveValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conversion.SizeOf
com.wyu4.snowberryjam.compiler.data.values.math.ArithmeticHolder <|-- com.wyu4.snowberryjam.compiler.data.values.math.Divide
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.WaitTask
javafx.util.Builder <|.. com.wyu4.snowberryjam.framework.ViewBuilder
com.wyu4.snowberryjam.compiler.data.values.ValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.VariableReference
com.wyu4.snowberryjam.compiler.data.values.math.ArithmeticHolder <|-- com.wyu4.snowberryjam.compiler.data.values.math.Plus
com.wyu4.snowberryjam.compiler.data.values.ValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.builtin.TimeHolder
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.IfElseTask
com.wyu4.snowberryjam.compiler.LocalStorage <|-- com.wyu4.snowberryjam.compiler.Compiler
com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.LessOrEqualTo
com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.GreaterThan
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.Repeat
com.wyu4.snowberryjam.compiler.data.values.ValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.InteractiveValueHolder
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.IfTask
com.wyu4.snowberryjam.compiler.data.values.InteractiveValueHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conversion.ArrayOf
com.wyu4.snowberryjam.compiler.data.values.conditional.ConditionalHolder <|-- com.wyu4.snowberryjam.compiler.data.values.conditional.LessThan
com.wyu4.snowberryjam.compiler.data.tasks.ExecutableTask <|.. com.wyu4.snowberryjam.compiler.data.tasks.PrintTask
com.wyu4.snowberryjam.compiler.data.values.math.ArithmeticHolder <|-- com.wyu4.snowberryjam.compiler.data.values.math.Round
@enduml